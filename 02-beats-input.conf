filter {

        if [message] =~ /UpdateTip/ {
                grok {
                    match => { "message" => "%{NUMBER:recv-time} - %{TIMESTAMP_ISO8601:recv-date} UpdateTip:%{SPACE}new best=%{BASE16NUM:block-hash}%{SPACE}height=%{NUMBER:height}%{SPACE}log2_work=%{NUMBER:work}%{SPACE}tx=%{NUMBER:tx}%{SPACE}timestamp=%{NUMBER:block-timestamp}%{SPACE}date=%{TIMESTAMP_ISO8601:date-mine}%{GREEDYDATA}" }
                    match => { 
                            "[log][file][path]" => "/mnt/nfs/DATASTORE/multichaind-logs/%{GREEDYDATA:filename}/sensors-data/%{GREEDYDATA}"
                    }
                    break_on_match => false
                }
        }

        else if [message] =~ /VerifyBlockMiner/{
                if [message] =~ /Could not load block/{
                        grok {
                                match => { "message" => "%{NUMBER:recv-time} - %{TIMESTAMP_ISO8601:recv-date} %{WORD:label}: (?<err_type>Could not load block) %{BASE16NUM:block-hash} %{GREEDYDATA}height %{NUMBER:height}%{GREEDYDATA}" }
                                match => { 
                                        "[log][file][path]" => "/mnt/nfs/DATASTORE/multichaind-logs/%{GREEDYDATA:filename}/sensors-data/%{GREEDYDATA}"
                                }
                                break_on_match => false
                        }
                }
                else if [message] =~ /Permission denied/{
                        grok {
                                match => { "message" => "%{NUMBER:recv-time} - %{TIMESTAMP_ISO8601:recv-date} %{WORD:label}: (?<err_type>Permission denied) for miner %{WORD:miner_id}%{GREEDYDATA}" }
                                match => { 
                                        "[log][file][path]" => "/mnt/nfs/DATASTORE/multichaind-logs/%{GREEDYDATA:filename}/sensors-data/%{GREEDYDATA}"
                                }
                                break_on_match => false
                        }
                }
                else if [message] =~ /miner verification/{
                        grok {
                                match => { "message" => "%{NUMBER:recv-time} - %{TIMESTAMP_ISO8601:recv-date} %{WORD:label}: Block %{BASE16NUM:block-hash} %{GREEDYDATA}height %{NUMBER:height}%{GREEDYDATA} (?<err_type>miner verification %{WORD}) " }
                                match => { 
                                        "[log][file][path]" => "/mnt/nfs/DATASTORE/multichaind-logs/%{GREEDYDATA:filename}/sensors-data/%{GREEDYDATA}"
                                }
                                break_on_match => false
                        }
                }
        }

        else if [message] =~ /MultiChain/{
                if [message] =~ /MultiChainMiner/{
                        if [message] =~ /ERROR/{
                                grok {
                                        match => { "message" => "%{NUMBER:recv-time} - %{TIMESTAMP_ISO8601:recv-date} ERROR: %{WORD:label} : (?<err_type>generated block is stale)" }
                                        match => { 
                                                "[log][file][path]" => "/mnt/nfs/DATASTORE/multichaind-logs/%{GREEDYDATA:filename}/sensors-data/%{GREEDYDATA}"
                                        }
                                        break_on_match => false
                                }
                        }
                        else if [message] =~ /Block Found/{
                                grok {
                                        match => { "message" => "%{NUMBER:recv-time} - %{TIMESTAMP_ISO8601:recv-date} %{WORD:label}: Block Found - %{BASE16NUM:block-hash}, prev: %{BASE16NUM:prev_block-hash}, height: %{NUMBER:height}, txs: %{NUMBER:nb_tx}" }
                                        match => { 
                                                "[log][file][path]" => "/mnt/nfs/DATASTORE/multichaind-logs/%{GREEDYDATA:filename}/sensors-data/%{GREEDYDATA}"
                                        }
                                        break_on_match => false
                                }
                        }
                        
                }
                else if [message] =~ /receive version message/{
                        grok {
                                match => { "message" => "%{NUMBER:recv-time} - %{TIMESTAMP_ISO8601:recv-date} receive version message: /(?<label>MultiChain):%{GREEDYDATA}/: version %{NUMBER:version}, blocks=%{NUMBER:nb_blocks}, us=%{HOSTNAME:useraddr}:%{NUMBER:userport}, peer=%{NUMBER:num_peer}, peeraddr=%{HOSTNAME:peeraddr}:%{NUMBER:peerport}" }
                                match => { 
                                        "[log][file][path]" => "/mnt/nfs/DATASTORE/multichaind-logs/%{GREEDYDATA:filename}/sensors-data/%{GREEDYDATA}"
                                }
                                break_on_match => false
                        }
                }
                           
        }

        else if [message] =~ /socket/ {
                if [message] =~ /Connection reset by peer/{
                        grok {
                                match => { "message" => "%{NUMBER:recv-time} - %{TIMESTAMP_ISO8601:recv-date} %{WORD:label} %{WORD:direction} error (?<err_type>Connection reset by peer) %{GREEDYDATA}%{NUMBER:err_code}%{GREEDYDATA}" }
                                match => { 
                                        "[log][file][path]" => "/mnt/nfs/DATASTORE/multichaind-logs/%{GREEDYDATA:filename}/sensors-data/%{GREEDYDATA}"
                                }
                                break_on_match => false
                        }
                }
                else if [message] =~ /Bad file descriptor/{
                        grok {
                                match => { "message" => "%{NUMBER:recv-time} - %{TIMESTAMP_ISO8601:recv-date} %{WORD:label} select error (?<err_type>Bad file descriptor) %{GREEDYDATA}%{NUMBER:err_code}%{GREEDYDATA}" }
                                match => { 
                                        "[log][file][path]" => "/mnt/nfs/DATASTORE/multichaind-logs/%{GREEDYDATA:filename}/sensors-data/%{GREEDYDATA}"
                                }
                                break_on_match => false
                        }
                }
                else if [message] =~ /Broken pipe/{
                        grok {
                                match => { "message" => "%{NUMBER:recv-time} - %{TIMESTAMP_ISO8601:recv-date} %{WORD:label} %{WORD:direction} error (?<err_type>Broken pipe) %{GREEDYDATA}%{NUMBER:err_code}%{GREEDYDATA}" }
                                match => { 
                                        "[log][file][path]" => "/mnt/nfs/DATASTORE/multichaind-logs/%{GREEDYDATA:filename}/sensors-data/%{GREEDYDATA}"
                                }
                                break_on_match => false
                        }
                }
                else if [message] =~ /timeout/{
                        grok {
                                match => { "message" => "%{NUMBER:recv-time} - %{TIMESTAMP_ISO8601:recv-date} %{WORD:label} %{WORD:direction} (?<err_type>timeout): %{NUMBER:duration}s" }
                                match => { 
                                        "[log][file][path]" => "/mnt/nfs/DATASTORE/multichaind-logs/%{GREEDYDATA:filename}/sensors-data/%{GREEDYDATA}"
                                }
                                break_on_match => false
                        }
                }
        }

        else if [message] =~ /mchn/ {
                if [message] =~ /mempool/{
                        grok {
                                match => { "message" => "%{NUMBER:recv-time} - %{TIMESTAMP_ISO8601:recv-date} %{WORD:label}: Synced with node %{NUMBER:num_node} on block %{NUMBER:num_block}%{GREEDYDATA}" }
                                match => { 
                                        "[log][file][path]" => "/mnt/nfs/DATASTORE/multichaind-logs/%{GREEDYDATA:filename}/sensors-data/%{GREEDYDATA}"
                                }
                                break_on_match => false
                        }
                }
                else if [message] =~ /seed/{
                        grok {
                                match => { "message" => "%{NUMBER:recv-time} - %{TIMESTAMP_ISO8601:recv-date} %{WORD:label}: Synced with seed node on block %{NUMBER:num_block}" }
                                match => { 
                                        "[log][file][path]" => "/mnt/nfs/DATASTORE/multichaind-logs/%{GREEDYDATA:filename}/sensors-data/%{GREEDYDATA}"
                                }
                                break_on_match => false
                        }
                }             
        }

        else if [message] =~ /CommitTransaction/ {
                grok {
                        match => { "message" => "%{NUMBER:recv-time} - %{TIMESTAMP_ISO8601:recv-date} %{WORD:label}: %{WORD:tx_id}, vin: %{NUMBER:vin}, vout: %{NUMBER:vout}" }
                        match => { 
                                "[log][file][path]" => "/mnt/nfs/DATASTORE/multichaind-logs/%{GREEDYDATA:filename}/sensors-data/%{GREEDYDATA}"
                        }
                        break_on_match => false
                }
        }

        else {
                drop { }
        }


    date {
        match => [ "recv-time", "UNIX" ]
	target => "recv-timestamp"
    }

    date {
        match => [ "recv-time", "UNIX" ]
        target => "@timestamp"
    }

    date {
        match => [ "block-timestamp", "UNIX" ]
        target => "block-timestamp"
    }

      mutate {
        convert => { "height" => "integer" }
      }

      mutate {
        convert => { "work" => "float" }
      }

      mutate {
        convert => { "tx" => "integer" }
      }


}

